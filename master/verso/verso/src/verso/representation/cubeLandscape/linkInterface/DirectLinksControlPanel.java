package verso.representation.cubeLandscape.linkInterface;

import java.awt.Color;
import java.util.HashMap;
import java.util.Iterator;

import javax.swing.JColorChooser;

import verso.graphics.primitives.PrimitiveColored;
import verso.representation.cubeLandscape.SceneLandscape;
import verso.representation.cubeLandscape.representationModel.SystemRepresentation;
import verso.representation.cubeLandscape.representationModel.link.LinkRepresentation;

public class DirectLinksControlPanel extends SysRepControlPanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private SceneLandscape sc;
	private HashMap<String, PrimitiveColored> meshes;
	
	private int meshSizePrecision = 1000;
	
    /** Creates new form DirectLinkControlPanel */
    public DirectLinksControlPanel(SceneLandscape sc, SystemRepresentation currSysRep, HashMap<String, PrimitiveColored> meshes) {
        super(currSysRep);
        
    	initComponents();
        
        this.sc = sc;
        this.meshes = meshes;
        
        for (String nMesh : meshes.keySet()) {
        	this.jcbLinkMesh.addItem(nMesh);
        }
    }

    public SceneLandscape getSc() {
    	return this.sc;
    }
    
    public void setSc(SceneLandscape sc) {
    	this.sc = sc;
    }   
    
    public int getMeshSizePrecision() {
    	return this.meshSizePrecision;
    }
    
    public void setMeshSizePrecision(int meshSizePrecision) {
    	this.meshSizePrecision = meshSizePrecision;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlblStartColor = new javax.swing.JLabel();
        jlblEndColor = new javax.swing.JLabel();
        jlblMeshSize = new javax.swing.JLabel();
        jlblLinkMesh = new javax.swing.JLabel();
        jlblStartColorDisplay = new javax.swing.JLabel();
        jlblEndColorDisplay = new javax.swing.JLabel();
        jcbLinkMesh = new javax.swing.JComboBox<String>();
        jslMeshSize = new javax.swing.JSlider();
        jlblBidirectionnalColor = new javax.swing.JLabel();
        jlblBidirectionnalColorDisplay = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jlblStartColor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlblStartColor.setText("Couleur de départ :");

        jlblEndColor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlblEndColor.setText("Couleur d'arrivée :");

        jlblMeshSize.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlblMeshSize.setText("Taille :");

        jlblLinkMesh.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlblLinkMesh.setText("Afficher avec :");

        jlblStartColorDisplay.setBackground(new java.awt.Color(0, 255, 0));
        jlblStartColorDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jlblStartColorDisplay.setOpaque(true);
        jlblStartColorDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblStartColorDisplayMouseClicked(evt);
            }
        });

        jlblEndColorDisplay.setBackground(new java.awt.Color(255, 0, 0));
        jlblEndColorDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jlblEndColorDisplay.setOpaque(true);
        jlblEndColorDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblEndColorDisplayMouseClicked(evt);
            }
        });

        jcbLinkMesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbLinkMeshActionPerformed(evt);
            }
        });

        jslMeshSize.setBackground(new java.awt.Color(255, 255, 255));
        jslMeshSize.setMaximum(1000);
        jslMeshSize.setMinimum(10);
        jslMeshSize.setOrientation(javax.swing.JSlider.VERTICAL);
        jslMeshSize.setPaintTicks(true);
        jslMeshSize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jslMeshSizeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jslMeshSizeMouseReleased(evt);
            }
        });
        jslMeshSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslMeshSizeStateChanged(evt);
            }
        });

        jlblBidirectionnalColor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlblBidirectionnalColor.setText("Couleur bidirectionnelle :");

        jlblBidirectionnalColorDisplay.setBackground(new java.awt.Color(204, 0, 204));
        jlblBidirectionnalColorDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jlblBidirectionnalColorDisplay.setOpaque(true);
        jlblBidirectionnalColorDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblBidirectionnalColorDisplayMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jlblMeshSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jslMeshSize, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlblLinkMesh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbLinkMesh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlblStartColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlblStartColorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlblEndColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlblEndColorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlblBidirectionnalColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlblBidirectionnalColorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblMeshSize))
            .addComponent(jslMeshSize, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblStartColorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblStartColor)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jlblEndColorDisplay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jlblEndColor)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlblBidirectionnalColorDisplay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlblBidirectionnalColor)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlblLinkMesh)
                        .addComponent(jcbLinkMesh, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbLinkMeshActionPerformed(java.awt.event.ActionEvent evt) {
    	
    	PrimitiveColored coloredMesh = this.meshes.get(this.jcbLinkMesh.getSelectedItem());
		Iterator<LinkRepresentation> linksItr = this.currSysRep.getLinks().iterator();
		while (linksItr.hasNext()) {
			linksItr.next().setColoredMesh(coloredMesh);
		}
		
		this.sc.refreshScene();
		
    }
    
    private void jslMeshSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslMeshSizeStateChanged
        // TODO add your handling code here:
    }
    
    private void jslMeshSizeMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void jslMeshSizeMouseReleased(java.awt.event.MouseEvent evt) {
        Iterator<LinkRepresentation> links = this.currSysRep.getLinks().iterator();
        LinkRepresentation currLink;
        float sliderValue = (float)this.jslMeshSize.getValue() / (float)meshSizePrecision;
        while (links.hasNext()) {
        	currLink = links.next();
        	currLink.setMeshSize(sliderValue/4);
        	currLink.setLineSize(sliderValue*10);
        }
        
        this.sc.refreshScene();
    }

    private void jlblStartColorDisplayMouseClicked(java.awt.event.MouseEvent evt) {
    	JColorChooser colorChooser = new JColorChooser();
    	colorChooser.setLocation(this.jlblStartColorDisplay.getX(), this.jlblStartColorDisplay.getY());
    	Color linkStartColor = JColorChooser.showDialog(this, "Couleurs noeuds packages", this.jlblStartColorDisplay.getBackground());
    	
    	if (linkStartColor != null) { 		
        	this.jlblStartColorDisplay.setBackground(linkStartColor);
	        
        	Iterator<LinkRepresentation> linksItr = this.currSysRep.getLinks().iterator();
	        while (linksItr.hasNext()) {
	        	linksItr.next().setLinkStartColor(linkStartColor);
	        }
	        
	        this.sc.refreshScene();
    	}
    }

    private void jlblEndColorDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblEndColorDisplayMouseClicked
    	JColorChooser colorChooser = new JColorChooser();
    	colorChooser.setLocation(this.jlblEndColorDisplay.getX(), this.jlblEndColorDisplay.getY());
    	Color linkEndColor = JColorChooser.showDialog(this, "Couleurs noeuds packages", this.jlblEndColorDisplay.getBackground());
    	
    	if (linkEndColor != null) { 		
        	this.jlblEndColorDisplay.setBackground(linkEndColor);
	        
        	Iterator<LinkRepresentation> linksItr = this.currSysRep.getLinks().iterator();
	        while (linksItr.hasNext()) {
	        	linksItr.next().setLinkEndColor(linkEndColor);
	        }
	        
	        this.sc.refreshScene();
    	}
    }

    private void jlblBidirectionnalColorDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblBidirectionnalColorDisplayMouseClicked
    	JColorChooser colorChooser = new JColorChooser();
    	colorChooser.setLocation(this.jlblBidirectionnalColorDisplay.getX(), this.jlblBidirectionnalColorDisplay.getY());
    	Color bidirectionnalColor = JColorChooser.showDialog(this, "Couleurs noeuds packages", this.jlblBidirectionnalColorDisplay.getBackground());
    	
    	if (bidirectionnalColor != null) { 		
        	this.jlblBidirectionnalColorDisplay.setBackground(bidirectionnalColor);
	        
        	Iterator<LinkRepresentation> linksItr = this.currSysRep.getLinks().iterator();
        	LinkRepresentation currLink;
	        while (linksItr.hasNext()) {
	        	currLink = linksItr.next();
	        	currLink.setLinkBidirectionalColor(bidirectionnalColor);
	        }
	        
	        this.sc.refreshScene();
    	}
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jcbLinkMesh;
    private javax.swing.JLabel jlblBidirectionnalColor;
    private javax.swing.JLabel jlblBidirectionnalColorDisplay;
    private javax.swing.JLabel jlblEndColor;
    private javax.swing.JLabel jlblEndColorDisplay;
    private javax.swing.JLabel jlblLinkMesh;
    private javax.swing.JLabel jlblMeshSize;
    private javax.swing.JLabel jlblStartColor;
    private javax.swing.JLabel jlblStartColorDisplay;
    private javax.swing.JSlider jslMeshSize;
    // End of variables declaration//GEN-END:variables

}
