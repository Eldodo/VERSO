package verso.traces;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

import javafx.stage.Stage;
import verso.representation.cubeLandscape.representationModel.ElementRepresentation;
import verso.representation.cubeLandscape.representationModel.SystemRepresentation;
import verso.representation.cubeLandscape.representationModel.link.NodeRepresentation;

public class TracesUtil {
	
	public static void createHeatMap(File tracesFile, Stage stage, Map<String, SystemRepresentation> sysreps) {
		Map<String, Double> tracesMap = new HashMap<String,Double>();
		
		if(tracesFile != null) {
			BufferedReader br = null;
			try {
				br = new BufferedReader(new FileReader(tracesFile));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String st; 
			 try {
				while ((st = br.readLine()) != null) {
					st = st.replaceAll("[^a-zA-Z/:]", "");
					st = st.replaceAll("[/]", ".");
					String[] tokens = st.split(":");
					if(tokens[0].equals("Enter")) {
						if(tracesMap.get(tokens[1])!=null)
							tracesMap.put(tokens[1], tracesMap.get(tokens[1])+1);
						else
							tracesMap.put(tokens[1], 1.0);
						System.out.println(tokens[1]);
					}
				}
				double max = 0;
				for(String s : tracesMap.keySet()) {
					if(tracesMap.get(s)>max)
						max = tracesMap.get(s);
				}
				for(String s : tracesMap.keySet()) {
					tracesMap.put(s, tracesMap.get(s)/max);
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			for(String s : sysreps.keySet()) {
				sysreps.get(s).setNumberOfCalls(tracesMap);
			}
		}
	}
	
	public static HashMap<NodeRepresentation, HashMap<NodeRepresentation, Integer[]>> createTracesLink(File tracesFile, Map<String, SystemRepresentation> sysreps){
		HashMap<NodeRepresentation, HashMap<NodeRepresentation, Integer[]>> tracesLinks = new HashMap<NodeRepresentation, HashMap<NodeRepresentation, Integer[]>>();
		Deque<String> deq = new ArrayDeque<String>();
		
		HashMap<String, ElementRepresentation> allElementsRepresentation = null;
		
		if(tracesFile != null) {
			BufferedReader br = null;
			try {
				br = new BufferedReader(new FileReader(tracesFile));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String st; 
			 try {
				while ((st = br.readLine()) != null) {
					st = st.replaceAll("[^a-zA-Z/:]", "");
					st = st.replaceAll("[/]", ".");
					String[] tokens = st.split(":");
					if(deq.isEmpty())
						deq.push(null);
					
				}
			 }catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
			}
			 for(String s : sysreps.keySet()) {
					
				}
				
			 return tracesLinks;
		}
		return null;
	}

}
