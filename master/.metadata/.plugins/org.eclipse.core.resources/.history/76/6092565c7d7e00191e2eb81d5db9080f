package verso.traces;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

import javafx.stage.Stage;
import verso.representation.cubeLandscape.representationModel.ElementRepresentation;
import verso.representation.cubeLandscape.representationModel.SystemRepresentation;
import verso.representation.cubeLandscape.representationModel.link.NodeRepresentation;

public class TracesUtil {
	
	public static void createHeatMap(File tracesFile, Stage stage, Map<String, SystemRepresentation> sysreps) {
		Map<String, Double> tracesMap = new HashMap<String,Double>();
		
		if(tracesFile != null) {
			BufferedReader br = null;
			try {
				br = new BufferedReader(new FileReader(tracesFile));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String st; 
			 try {
				while ((st = br.readLine()) != null) {
					st = st.replaceAll("[^a-zA-Z/:]", "");
					st = st.replaceAll("[/]", ".");
					String[] tokens = st.split(":");
					if(tokens[0].equals("Enter")) {
						if(tracesMap.get(tokens[1])!=null)
							tracesMap.put(tokens[1], tracesMap.get(tokens[1])+1);
						else
							tracesMap.put(tokens[1], 1.0);
					}
				}
				double max = 0;
				for(String s : tracesMap.keySet()) {
					if(tracesMap.get(s)>max)
						max = tracesMap.get(s);
				}
				for(String s : tracesMap.keySet()) {
					tracesMap.put(s, tracesMap.get(s)/max);
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			for(String s : sysreps.keySet()) {
				sysreps.get(s).setNumberOfCalls(tracesMap);
			}
		}
	}
	
	public static HashMap<NodeRepresentation, HashMap<NodeRepresentation, Integer[]>> createTracesLink(File tracesFile, Map<String, SystemRepresentation> sysreps){
		HashMap<NodeRepresentation, HashMap<NodeRepresentation, Integer[]>> tracesLinks = new HashMap<NodeRepresentation, HashMap<NodeRepresentation, Integer[]>>();
		HashMap<String, HashMap<String,Integer[]>> tracesLinksString = new HashMap<String, HashMap<String,Integer[]>>();
		Deque<String> deq = new ArrayDeque<String>();
		int max = 0;
		int nbCall = 1;
		String tokMax = null;
		HashMap<String, ElementRepresentation> allElementsRepresentation = null;
		
		if(tracesFile != null) {
			BufferedReader br = null;
			try {
				br = new BufferedReader(new FileReader(tracesFile));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String st; 
			 try {
				while ((st = br.readLine()) != null) {
					st = st.replaceAll("[^a-zA-Z/:]", "");
					st = st.replaceAll("[/]", ".");
					String[] tokens = st.split(":");
					if(tokens[0].equals("Enter")) {
						if(deq.isEmpty()) {
							deq.push(tokens[1]);
							continue;
						}
						if(tracesLinksString.get(deq.peek()) == null) {
							tracesLinksString.put(deq.peek(), new HashMap<String, Integer[]>());
						}
						if(tracesLinksString.get(deq.peek()).get(tokens[1])!= null)
							nbCall = tracesLinksString.get(deq.peek()).get(tokens[1])[2]+1;
						else
							nbCall = 1;
						tracesLinksString.get(deq.peek()).put(tokens[1],new Integer[] { 1, 1 ,
								nbCall});
						if(tracesLinksString.get(deq.peek()).get(tokens[1])!= null && max < tracesLinksString.get(deq.peek()).get(tokens[1])[2]) {
							max = tracesLinksString.get(deq.peek()).get(tokens[1])[2];
							tokMax = deq.peek();
						}
						deq.push(tokens[1]);
					}
					else if(!deq.isEmpty()){
						deq.pop();
					}
				}
			 }catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
			}
			 for(String s1 : tracesLinksString.keySet()) {
				 for(String s2: tracesLinksString.get(s1).keySet()) {
					 tracesLinksString.get(s1).get(s2)[2] =  tracesLinksString.get(s1).get(s2)[2]*100/max;
					 System.out.println( tracesLinksString.get(s1).get(s2)[2]);
				 }
			 }
			 for(String s : sysreps.keySet()) {
					
				}
			System.out.println(tokMax +":  Max : " + max*100/max);
			 return tracesLinks;
		}
		return null;
	}

}
